{"uid":"166081fa333193e1","name":"test_Login","fullName":"testCases.test_Login.Test_001_Login#test_Login","historyId":"bf279bb79aef8d954beda9cf354aa4d2","time":{"start":1662620401550,"stop":1662620409304,"duration":7754},"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <testCases.test_Login.Test_001_Login object at 0x000001BB108CF1C0>\n\n    @pytest.mark.usefixtures(\"setup\")\n    def test_Login(self):\n        RootDir = self.setRootDir()\n        log = self.getLogger()\n        # log.info(\"\\n ************* test_Login ***************** \")\n        log.info(\"1. Loading the App URL \")\n        self.driver.get(ReadProperties.getAppURL())\n        self.lp = Login(self.driver)\n        # self.lp.setUserName(self.userName)\n        # self.lp.setPassword(self.password)\n        log.info(\"2. Enter Username \")\n        log.info(BaseClass.random_generator())\n        self.lp.setUserName(ReadProperties.getUserName())\n        log.info(\"3. Enter Password \")\n        self.lp.setPassword(ReadProperties.getPassword())\n        log.info(\"4. Click Login \")\n        self.eleText = self.lp.clickLogin()\n        act_title = self.driver.title\n        log.info(\"5. Verify if Login is successful \")\n        # Validation\n        if self.eleText == \"John Smith\":\n            assert True\n            self.driver.get_screenshot_as_file(RootDir + r\"\\Screenshots\\test_LoginPassed-%s.png\" % now)\n            log.info(\"PASSED: Login Successful\")\n        else:\n            # self.driver.get_screenshot_as_file(RootDir + r\"\\Screenshots\\test_LoginAssertionFailed.png\" % now)\n            log.error(\"Error: Failed verifying the successful logging into the App\")\n>           assert False\nE           assert False\n\ntestCases\\test_Login.py:72: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1662620398039,"stop":1662620401550,"duration":3511},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert False","statusTrace":"self = <testCases.test_Login.Test_001_Login object at 0x000001BB108CF1C0>\n\n    @pytest.mark.usefixtures(\"setup\")\n    def test_Login(self):\n        RootDir = self.setRootDir()\n        log = self.getLogger()\n        # log.info(\"\\n ************* test_Login ***************** \")\n        log.info(\"1. Loading the App URL \")\n        self.driver.get(ReadProperties.getAppURL())\n        self.lp = Login(self.driver)\n        # self.lp.setUserName(self.userName)\n        # self.lp.setPassword(self.password)\n        log.info(\"2. Enter Username \")\n        log.info(BaseClass.random_generator())\n        self.lp.setUserName(ReadProperties.getUserName())\n        log.info(\"3. Enter Password \")\n        self.lp.setPassword(ReadProperties.getPassword())\n        log.info(\"4. Click Login \")\n        self.eleText = self.lp.clickLogin()\n        act_title = self.driver.title\n        log.info(\"5. Verify if Login is successful \")\n        # Validation\n        if self.eleText == \"John Smith\":\n            assert True\n            self.driver.get_screenshot_as_file(RootDir + r\"\\Screenshots\\test_LoginPassed-%s.png\" % now)\n            log.info(\"PASSED: Login Successful\")\n        else:\n            # self.driver.get_screenshot_as_file(RootDir + r\"\\Screenshots\\test_LoginAssertionFailed.png\" % now)\n            log.error(\"Error: Failed verifying the successful logging into the App\")\n>           assert False\nE           assert False\n\ntestCases\\test_Login.py:72: AssertionError","steps":[],"attachments":[{"uid":"e311e960f7ec372","name":"log","source":"e311e960f7ec372.txt","type":"text/plain","size":506},{"uid":"1795185d45653aec","name":"stdout","source":"1795185d45653aec.txt","type":"text/plain","size":48}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true},"afterStages":[{"name":"setup::0","time":{"start":1662620410145,"stop":1662620410232,"duration":87},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('setup')"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"test_Login"},{"name":"subSuite","value":"Test_001_Login"},{"name":"host","value":"MSI"},{"name":"thread","value":"38892-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.test_Login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('setup')"]},"source":"166081fa333193e1.json","parameterValues":[]}